}
fint1<-function(x){1/(1+x^2)}
vs4(1000,fint1)
vs4<-function(n,fint){
tmp1<-runif(n,0,2)
tmp<-c(tmp1,2-tmp1)
return(c(2*mean(fint(tmp)),integrate(fint,0,2)))
}
fint1<-function(x){1/(1+x^2)}
vs4(1000,fint1)
vs4
vs4(10000,fint1)
?sample
##random sampling
x1<-runif(1000,0,10)
x2<-runif(1000,0,10)
e<-rnorm(1000)
b1<-1
b2<-2
y<-b1*x1+b2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
View(full.data)
View(full.data)
full.data<-full.data[order(runif(1000,0,1)),]#full.data<-full.data[sample(1:1000,1000,replace=FALSE),]
data.1<-full.data[1:500]
data.1<-full.data[1:500,]
View(data.1)
View(data.1)
model.11<-lm(y~x1,data=data.1)
x1<-runif(1000,0,10)
x2<-runif(1000,0,10)
e<-rnorm(1000)
b1<-1
b2<-2
y<-b1*x1+b2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
full.data<-full.data[order(runif(1000,0,1)),]#full.data<-full.data[sample(1:1000,1000,replace=FALSE),]
data.1<-full.data[1:500,]
data.2<-full.data[501:length(x1),]
model.11<-lm(y~x1,data=data.1)
model.21<-lm(y~x1+x2,data=data.1)
model.12<-lm(y~x1,data=data.2)
model.22<-lm(y~x1+x2,data=data.2)
pmse1<-sum((data.2$y-cbind(rep(1,500),data.2$x1)%*%model.11$coef)^2,
(data.1$y-cbind(rep(1,500),data.1$x1)%*%model.12$coef)^2)
pmse2<-sum((data.2$y-cbind(rep(1,500),data.2$x1,data.2$x2)%*%model.21$coef)^2,
(data.1$y-cbind(rep(1,500),data.1$x1,data.1$x2)%*%model.22$coef)^2)
jk.beta<-numeric(200){
for(i in 1:200){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
return(c(999*sum(jk.beta-mean(jk.beta)),999*999*var(jk.beta)/1000))
}
#use jackknife method to calculate mean and variance
jk.beta<-numeric(200)
for(i in 1:200){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
return(c(999*sum(jk.beta-mean(jk.beta)),999*999*var(jk.beta)/1000))
result1<-c(999*sum(jk.beta-mean(jk.beta)),999*999*var(jk.beta)/1000)
qnorm(0.05)
#use jackknife method to calculate mean and variance
jk.beta<-numeric(200)
for(i in 1:200){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
result1<-c(999*sum(jk.beta-mean(jk.beta)),999*999*var(jk.beta)/1000)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j])
}
p<-ttime/t}
simu_jack(100,100)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j])
}
p<-ttime/t}
simu_jack(100,100)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j])
}
p<-ttime/t
return(p)}
simu_jack(100,100)
simu_jack(100,100)
#use jackknife method to calculate mean and variance
jk.beta<-numeric(200)
for(i in 1:200){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
result1<-c(999*sum(jk.beta-mean(jk.beta)),999*999*var(jk.beta)/1000)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j])
}
cat(ttime)
cat(t)
p<-ttime/t
return(p)}
simu_jack(100,100)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j])
}
cat(ttime,"\n")
cat(t,"\n")
p<-ttime/t
return(p)}
simu_jack(100,100)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
cat(ttime)
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j])
}
cat(ttime,"\n")
cat(t,"\n")
p<-ttime/t
return(p)}
simu_jack(100,100)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
cat(ttime)
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j])
}
cat(ttime,"\n")
cat(t,"\n")
p<-ttime/t
return(p)}
simu_jack(100,100)
simu_jack(1000,100)
simu_jack(10000,100)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
cat(lm(y~x1+x2,data=full.data)$coef[2])
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j])
}
cat(ttime,"\n")
cat(t,"\n")
p<-ttime/t
return(p)}
simu_jack(1000,100)
#use jackknife method to calculate mean and variance
jk.beta<-numeric(200)
for(i in 1:200){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
result1<-c(999*sum(jk.beta-mean(jk.beta)),999*999*var(jk.beta)/1000)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta/n)
cat(lm(y~x1+x2,data=full.data)$coef[2],'\n')
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j])
}
cat(ttime,"\n")
cat(t,"\n")
p<-ttime/t
return(p)}
simu_jack(1000,100)
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta)/n
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j])
}
cat(ttime,"\n")
cat(t,"\n")
p<-ttime/t
return(p)}
simu_jack(1000,100)
simu_jack(100,1000)
jk.beta<-numeric(200)
for(i in 1:200){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
result1<-c(999*sum(jk.beta-mean(jk.beta)),999*999*var(jk.beta)/1000)
#use simulation method to test jackknife
simu_jack<-function(n,t){
ttime<-0
betavar<-numeric(t)
for(j in 1:t){
x1<-runif(n,0,10)
x2<-runif(n,0,20)
e<-rnorm(n)
beta1<-1
beta2<-2
y<-beta1*x1+beta2*x2+e
full.data<-data.frame(cbind(y,x1,x2))
jk.beta<-numeric(n)
for(i in n){
jk.data<-full.data[-i,]
jk.model<-lm(y~x1+x2,data=jk.data)
jk.est<-jk.model$coef[2]
jk.beta[i]<-jk.est}
betavar[j]<-((n-1)^2)*var(jk.beta)/n
cat(ttime,'\n')
ttime<-ttime+(lm(y~x1+x2,data=full.data)$coef[2]+qnorm(0.05)*betavar[j]<1 &1<lm(y~x1+x2,data=full.data)$coef[2]-qnorm(0.05)*betavar[j])
}
cat(ttime,"\n")
p<-ttime/t
return(p)}
simu_jack(100,100)
simu_jack(100,1000)
simu_jack(100,10000)
x-<rchisq(20,1)
x<-rchisq(20,1)
mean(x)
y<-matrix(sample(x,1000*20,rep=TRUE),1000,20)
ym<-apply(y,1,mean)
quantile(ym,c(0.025,0.975))
load("~/Documents/R practice/assignment1/grades.RData")
View(grades)
View(grades)
debug(ls)
ls
ls()
ls()
library(datasets)
data(iris)
?iris
s<-split(iris,iris$Species)
lapply(s,function(x) colMeans(x[,"Sepal.Length"]))
lapply(s,function(x) colMeans(x))
s
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
s<-split(iris,iris$Species)
lapply(s,function(x) mean(x[,"Sepal.Length"]))
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636-209.21429
unclass
?unclass
library(swirl)
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2<-as.Date('1960-01-01')
d2<-as.Date('1969-01-01')
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<- "October 17, 1986 08:24"
t4<-strptime(t3,"%B %d,%Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time(>t1)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
1:20
pi:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,,6))
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem)elem[2])
set.seed(1)
rpois(5, 2)
?rnorm
?arima.sim
?stats
library(help = "stats")
?markdown
??markdown
install.packages("highlight")
install.packages("formatR")
install.packages("framed")
install.packages(c("car", "caTools", "class", "cluster", "codetools", "htmltools", "jsonlite", "KernSmooth", "labeling", "markdown", "MASS", "mgcv", "mime", "RJSONIO", "rmarkdown", "shiny", "testthat", "vcd", "xtable"))
?markdown
??markdown
summary(cars)
```{r, echo=FALSE}
You can also embed plots, for example:
$$ffa%5*aga$$
$$-ffa%5*aga-$$
You can also embed plots, for example:
```{r, echo=FALSE}
setwd("~/Documents/R practice/R-Training/Chapter01")
